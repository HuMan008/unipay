<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.gotoil.unipay.model.mapper.OrderMapper">
    <resultMap id="BaseResultMap" type="cn.gotoil.unipay.model.entity.Order">
        <id column="id" jdbcType="CHAR" property="id"/>
        <result column="app_id" jdbcType="CHAR" property="appId"/>
        <result column="app_order_no" jdbcType="VARCHAR" property="appOrderNo"/>
        <result column="app_user_id" jdbcType="VARCHAR" property="appUserId"/>
        <result column="payment_id" jdbcType="VARCHAR" property="paymentId"/>
        <result column="payment_uid" jdbcType="VARCHAR" property="paymentUid"/>
        <result column="expired_time_minute" jdbcType="INTEGER" property="expiredTimeMinute"/>
        <result column="fee" jdbcType="INTEGER" property="fee"/>
        <result column="subjects" jdbcType="VARCHAR" property="subjects"/>
        <result column="descp" jdbcType="VARCHAR" property="descp"/>
        <result column="extra_param" jdbcType="VARCHAR" property="extraParam"/>
        <result column="sync_url" jdbcType="VARCHAR" property="syncUrl"/>
        <result column="async_url" jdbcType="VARCHAR" property="asyncUrl"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="order_pay_datetime" jdbcType="BIGINT" property="orderPayDatetime"/>
        <result column="pay_fee" jdbcType="INTEGER" property="payFee"/>
        <result column="arr_fee" jdbcType="INTEGER" property="arrFee"/>
        <result column="pay_type" jdbcType="VARCHAR" property="payType"/>
        <result column="pay_type_category" jdbcType="TINYINT" property="payTypeCategory"/>
        <result column="charge_account_id" jdbcType="INTEGER" property="chargeAccountId"/>
        <result column="api_version" jdbcType="CHAR" property="apiVersion"/>
        <result column="data_version" jdbcType="INTEGER" property="dataVersion"/>
        <result column="created_at" jdbcType="TIMESTAMP" property="createdAt"/>
        <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, app_id, app_order_no, app_user_id, payment_id, payment_uid, expired_time_minute, 
    fee, subjects, descp, extra_param, sync_url, async_url, status, order_pay_datetime, 
    pay_fee, arr_fee, pay_type, pay_type_category, charge_account_id, api_version, data_version, 
    created_at, updated_at
  </sql>
    <select id="selectByExample" parameterType="cn.gotoil.unipay.model.entity.OrderExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from dp_order
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="limit != null">
            <if test="offset != null">
                limit ${offset}, ${limit}
            </if>
            <if test="offset == null">
                limit ${limit}
            </if>
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from dp_order
        where id = #{id,jdbcType=CHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from dp_order
    where id = #{id,jdbcType=CHAR}
  </delete>
    <delete id="deleteByExample" parameterType="cn.gotoil.unipay.model.entity.OrderExample">
        delete from dp_order
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="cn.gotoil.unipay.model.entity.Order">
    insert into dp_order (id, app_id, app_order_no, 
      app_user_id, payment_id, payment_uid, 
      expired_time_minute, fee, subjects, 
      descp, extra_param, sync_url, 
      async_url, status, order_pay_datetime, 
      pay_fee, arr_fee, pay_type, 
      pay_type_category, charge_account_id, api_version, 
      data_version, created_at, updated_at
      )
    values (#{id,jdbcType=CHAR}, #{appId,jdbcType=CHAR}, #{appOrderNo,jdbcType=VARCHAR}, 
      #{appUserId,jdbcType=VARCHAR}, #{paymentId,jdbcType=VARCHAR}, #{paymentUid,jdbcType=VARCHAR}, 
      #{expiredTimeMinute,jdbcType=INTEGER}, #{fee,jdbcType=INTEGER}, #{subjects,jdbcType=VARCHAR}, 
      #{descp,jdbcType=VARCHAR}, #{extraParam,jdbcType=VARCHAR}, #{syncUrl,jdbcType=VARCHAR}, 
      #{asyncUrl,jdbcType=VARCHAR}, #{status,jdbcType=TINYINT}, #{orderPayDatetime,jdbcType=BIGINT}, 
      #{payFee,jdbcType=INTEGER}, #{arrFee,jdbcType=INTEGER}, #{payType,jdbcType=VARCHAR}, 
      #{payTypeCategory,jdbcType=TINYINT}, #{chargeAccountId,jdbcType=INTEGER}, #{apiVersion,jdbcType=CHAR}, 
      #{dataVersion,jdbcType=INTEGER}, #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP}
      )
  </insert>
    <insert id="insertSelective" parameterType="cn.gotoil.unipay.model.entity.Order">
        insert into dp_order
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="appId != null">
                app_id,
            </if>
            <if test="appOrderNo != null">
                app_order_no,
            </if>
            <if test="appUserId != null">
                app_user_id,
            </if>
            <if test="paymentId != null">
                payment_id,
            </if>
            <if test="paymentUid != null">
                payment_uid,
            </if>
            <if test="expiredTimeMinute != null">
                expired_time_minute,
            </if>
            <if test="fee != null">
                fee,
            </if>
            <if test="subjects != null">
                subjects,
            </if>
            <if test="descp != null">
                descp,
            </if>
            <if test="extraParam != null">
                extra_param,
            </if>
            <if test="syncUrl != null">
                sync_url,
            </if>
            <if test="asyncUrl != null">
                async_url,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="orderPayDatetime != null">
                order_pay_datetime,
            </if>
            <if test="payFee != null">
                pay_fee,
            </if>
            <if test="arrFee != null">
                arr_fee,
            </if>
            <if test="payType != null">
                pay_type,
            </if>
            <if test="payTypeCategory != null">
                pay_type_category,
            </if>
            <if test="chargeAccountId != null">
                charge_account_id,
            </if>
            <if test="apiVersion != null">
                api_version,
            </if>
            <if test="dataVersion != null">
                data_version,
            </if>
            <if test="createdAt != null">
                created_at,
            </if>
            <if test="updatedAt != null">
                updated_at,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=CHAR},
            </if>
            <if test="appId != null">
                #{appId,jdbcType=CHAR},
            </if>
            <if test="appOrderNo != null">
                #{appOrderNo,jdbcType=VARCHAR},
            </if>
            <if test="appUserId != null">
                #{appUserId,jdbcType=VARCHAR},
            </if>
            <if test="paymentId != null">
                #{paymentId,jdbcType=VARCHAR},
            </if>
            <if test="paymentUid != null">
                #{paymentUid,jdbcType=VARCHAR},
            </if>
            <if test="expiredTimeMinute != null">
                #{expiredTimeMinute,jdbcType=INTEGER},
            </if>
            <if test="fee != null">
                #{fee,jdbcType=INTEGER},
            </if>
            <if test="subjects != null">
                #{subjects,jdbcType=VARCHAR},
            </if>
            <if test="descp != null">
                #{descp,jdbcType=VARCHAR},
            </if>
            <if test="extraParam != null">
                #{extraParam,jdbcType=VARCHAR},
            </if>
            <if test="syncUrl != null">
                #{syncUrl,jdbcType=VARCHAR},
            </if>
            <if test="asyncUrl != null">
                #{asyncUrl,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=TINYINT},
            </if>
            <if test="orderPayDatetime != null">
                #{orderPayDatetime,jdbcType=BIGINT},
            </if>
            <if test="payFee != null">
                #{payFee,jdbcType=INTEGER},
            </if>
            <if test="arrFee != null">
                #{arrFee,jdbcType=INTEGER},
            </if>
            <if test="payType != null">
                #{payType,jdbcType=VARCHAR},
            </if>
            <if test="payTypeCategory != null">
                #{payTypeCategory,jdbcType=TINYINT},
            </if>
            <if test="chargeAccountId != null">
                #{chargeAccountId,jdbcType=INTEGER},
            </if>
            <if test="apiVersion != null">
                #{apiVersion,jdbcType=CHAR},
            </if>
            <if test="dataVersion != null">
                #{dataVersion,jdbcType=INTEGER},
            </if>
            <if test="createdAt != null">
                #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedAt != null">
                #{updatedAt,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="cn.gotoil.unipay.model.entity.OrderExample" resultType="java.lang.Long">
        select count(*) from dp_order
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update dp_order
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=CHAR},
            </if>
            <if test="record.appId != null">
                app_id = #{record.appId,jdbcType=CHAR},
            </if>
            <if test="record.appOrderNo != null">
                app_order_no = #{record.appOrderNo,jdbcType=VARCHAR},
            </if>
            <if test="record.appUserId != null">
                app_user_id = #{record.appUserId,jdbcType=VARCHAR},
            </if>
            <if test="record.paymentId != null">
                payment_id = #{record.paymentId,jdbcType=VARCHAR},
            </if>
            <if test="record.paymentUid != null">
                payment_uid = #{record.paymentUid,jdbcType=VARCHAR},
            </if>
            <if test="record.expiredTimeMinute != null">
                expired_time_minute = #{record.expiredTimeMinute,jdbcType=INTEGER},
            </if>
            <if test="record.fee != null">
                fee = #{record.fee,jdbcType=INTEGER},
            </if>
            <if test="record.subjects != null">
                subjects = #{record.subjects,jdbcType=VARCHAR},
            </if>
            <if test="record.descp != null">
                descp = #{record.descp,jdbcType=VARCHAR},
            </if>
            <if test="record.extraParam != null">
                extra_param = #{record.extraParam,jdbcType=VARCHAR},
            </if>
            <if test="record.syncUrl != null">
                sync_url = #{record.syncUrl,jdbcType=VARCHAR},
            </if>
            <if test="record.asyncUrl != null">
                async_url = #{record.asyncUrl,jdbcType=VARCHAR},
            </if>
            <if test="record.status != null">
                status = #{record.status,jdbcType=TINYINT},
            </if>
            <if test="record.orderPayDatetime != null">
                order_pay_datetime = #{record.orderPayDatetime,jdbcType=BIGINT},
            </if>
            <if test="record.payFee != null">
                pay_fee = #{record.payFee,jdbcType=INTEGER},
            </if>
            <if test="record.arrFee != null">
                arr_fee = #{record.arrFee,jdbcType=INTEGER},
            </if>
            <if test="record.payType != null">
                pay_type = #{record.payType,jdbcType=VARCHAR},
            </if>
            <if test="record.payTypeCategory != null">
                pay_type_category = #{record.payTypeCategory,jdbcType=TINYINT},
            </if>
            <if test="record.chargeAccountId != null">
                charge_account_id = #{record.chargeAccountId,jdbcType=INTEGER},
            </if>
            <if test="record.apiVersion != null">
                api_version = #{record.apiVersion,jdbcType=CHAR},
            </if>
            <if test="record.dataVersion != null">
                data_version = #{record.dataVersion,jdbcType=INTEGER},
            </if>
            <if test="record.createdAt != null">
                created_at = #{record.createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updatedAt != null">
                updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update dp_order
        set id = #{record.id,jdbcType=CHAR},
        app_id = #{record.appId,jdbcType=CHAR},
        app_order_no = #{record.appOrderNo,jdbcType=VARCHAR},
        app_user_id = #{record.appUserId,jdbcType=VARCHAR},
        payment_id = #{record.paymentId,jdbcType=VARCHAR},
        payment_uid = #{record.paymentUid,jdbcType=VARCHAR},
        expired_time_minute = #{record.expiredTimeMinute,jdbcType=INTEGER},
        fee = #{record.fee,jdbcType=INTEGER},
        subjects = #{record.subjects,jdbcType=VARCHAR},
        descp = #{record.descp,jdbcType=VARCHAR},
        extra_param = #{record.extraParam,jdbcType=VARCHAR},
        sync_url = #{record.syncUrl,jdbcType=VARCHAR},
        async_url = #{record.asyncUrl,jdbcType=VARCHAR},
        status = #{record.status,jdbcType=TINYINT},
        order_pay_datetime = #{record.orderPayDatetime,jdbcType=BIGINT},
        pay_fee = #{record.payFee,jdbcType=INTEGER},
        arr_fee = #{record.arrFee,jdbcType=INTEGER},
        pay_type = #{record.payType,jdbcType=VARCHAR},
        pay_type_category = #{record.payTypeCategory,jdbcType=TINYINT},
        charge_account_id = #{record.chargeAccountId,jdbcType=INTEGER},
        api_version = #{record.apiVersion,jdbcType=CHAR},
        data_version = #{record.dataVersion,jdbcType=INTEGER},
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="cn.gotoil.unipay.model.entity.Order">
        update dp_order
        <set>
            <if test="appId != null">
                app_id = #{appId,jdbcType=CHAR},
            </if>
            <if test="appOrderNo != null">
                app_order_no = #{appOrderNo,jdbcType=VARCHAR},
            </if>
            <if test="appUserId != null">
                app_user_id = #{appUserId,jdbcType=VARCHAR},
            </if>
            <if test="paymentId != null">
                payment_id = #{paymentId,jdbcType=VARCHAR},
            </if>
            <if test="paymentUid != null">
                payment_uid = #{paymentUid,jdbcType=VARCHAR},
            </if>
            <if test="expiredTimeMinute != null">
                expired_time_minute = #{expiredTimeMinute,jdbcType=INTEGER},
            </if>
            <if test="fee != null">
                fee = #{fee,jdbcType=INTEGER},
            </if>
            <if test="subjects != null">
                subjects = #{subjects,jdbcType=VARCHAR},
            </if>
            <if test="descp != null">
                descp = #{descp,jdbcType=VARCHAR},
            </if>
            <if test="extraParam != null">
                extra_param = #{extraParam,jdbcType=VARCHAR},
            </if>
            <if test="syncUrl != null">
                sync_url = #{syncUrl,jdbcType=VARCHAR},
            </if>
            <if test="asyncUrl != null">
                async_url = #{asyncUrl,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
            <if test="orderPayDatetime != null">
                order_pay_datetime = #{orderPayDatetime,jdbcType=BIGINT},
            </if>
            <if test="payFee != null">
                pay_fee = #{payFee,jdbcType=INTEGER},
            </if>
            <if test="arrFee != null">
                arr_fee = #{arrFee,jdbcType=INTEGER},
            </if>
            <if test="payType != null">
                pay_type = #{payType,jdbcType=VARCHAR},
            </if>
            <if test="payTypeCategory != null">
                pay_type_category = #{payTypeCategory,jdbcType=TINYINT},
            </if>
            <if test="chargeAccountId != null">
                charge_account_id = #{chargeAccountId,jdbcType=INTEGER},
            </if>
            <if test="apiVersion != null">
                api_version = #{apiVersion,jdbcType=CHAR},
            </if>
            <if test="dataVersion != null">
                data_version = #{dataVersion,jdbcType=INTEGER},
            </if>
            <if test="createdAt != null">
                created_at = #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedAt != null">
                updated_at = #{updatedAt,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=CHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="cn.gotoil.unipay.model.entity.Order">
    update dp_order
    set app_id = #{appId,jdbcType=CHAR},
      app_order_no = #{appOrderNo,jdbcType=VARCHAR},
      app_user_id = #{appUserId,jdbcType=VARCHAR},
      payment_id = #{paymentId,jdbcType=VARCHAR},
      payment_uid = #{paymentUid,jdbcType=VARCHAR},
      expired_time_minute = #{expiredTimeMinute,jdbcType=INTEGER},
      fee = #{fee,jdbcType=INTEGER},
      subjects = #{subjects,jdbcType=VARCHAR},
      descp = #{descp,jdbcType=VARCHAR},
      extra_param = #{extraParam,jdbcType=VARCHAR},
      sync_url = #{syncUrl,jdbcType=VARCHAR},
      async_url = #{asyncUrl,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT},
      order_pay_datetime = #{orderPayDatetime,jdbcType=BIGINT},
      pay_fee = #{payFee,jdbcType=INTEGER},
      arr_fee = #{arrFee,jdbcType=INTEGER},
      pay_type = #{payType,jdbcType=VARCHAR},
      pay_type_category = #{payTypeCategory,jdbcType=TINYINT},
      charge_account_id = #{chargeAccountId,jdbcType=INTEGER},
      api_version = #{apiVersion,jdbcType=CHAR},
      data_version = #{dataVersion,jdbcType=INTEGER},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=CHAR}
  </update>
</mapper>