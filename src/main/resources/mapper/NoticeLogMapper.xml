<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.gotoil.unipay.model.mapper.NoticeLogMapper">
    <resultMap id="BaseResultMap" type="cn.gotoil.unipay.model.entity.NoticeLog">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="order_id" jdbcType="CHAR" property="orderId"/>
        <result column="app_id" jdbcType="VARCHAR" property="appId"/>
        <result column="app_order_no" jdbcType="VARCHAR" property="appOrderNo"/>
        <result column="method" jdbcType="TINYINT" property="method"/>
        <result column="notify_url" jdbcType="VARCHAR" property="notifyUrl"/>
        <result column="params" jdbcType="VARCHAR" property="params"/>
        <result column="response_content" jdbcType="CHAR" property="responseContent"/>
        <result column="notice_datetime" jdbcType="TIMESTAMP" property="noticeDatetime"/>
        <result column="repeat_count" jdbcType="INTEGER" property="repeatCount"/>
        <result column="send_type" jdbcType="TINYINT" property="sendType"/>
        <result column="created_at" jdbcType="TIMESTAMP" property="createdAt"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, order_id, app_id, app_order_no, method, notify_url, params, response_content, 
    notice_datetime, repeat_count, send_type, created_at
  </sql>
    <select id="selectByExample" parameterType="cn.gotoil.unipay.model.entity.NoticeLogExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from dp_notice_log
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="limit != null">
            <if test="offset != null">
                limit ${offset}, ${limit}
            </if>
            <if test="offset == null">
                limit ${limit}
            </if>
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from dp_notice_log
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from dp_notice_log
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="cn.gotoil.unipay.model.entity.NoticeLogExample">
        delete from dp_notice_log
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="cn.gotoil.unipay.model.entity.NoticeLog">
    insert into dp_notice_log (id, order_id, app_id, 
      app_order_no, method, notify_url, 
      params, response_content, notice_datetime, 
      repeat_count, send_type, created_at
      )
    values (#{id,jdbcType=INTEGER}, #{orderId,jdbcType=CHAR}, #{appId,jdbcType=VARCHAR}, 
      #{appOrderNo,jdbcType=VARCHAR}, #{method,jdbcType=TINYINT}, #{notifyUrl,jdbcType=VARCHAR}, 
      #{params,jdbcType=VARCHAR}, #{responseContent,jdbcType=CHAR}, #{noticeDatetime,jdbcType=TIMESTAMP}, 
      #{repeatCount,jdbcType=INTEGER}, #{sendType,jdbcType=TINYINT}, #{createdAt,jdbcType=TIMESTAMP}
      )
  </insert>
    <insert id="insertSelective" parameterType="cn.gotoil.unipay.model.entity.NoticeLog">
        insert into dp_notice_log
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="orderId != null">
                order_id,
            </if>
            <if test="appId != null">
                app_id,
            </if>
            <if test="appOrderNo != null">
                app_order_no,
            </if>
            <if test="method != null">
                method,
            </if>
            <if test="notifyUrl != null">
                notify_url,
            </if>
            <if test="params != null">
                params,
            </if>
            <if test="responseContent != null">
                response_content,
            </if>
            <if test="noticeDatetime != null">
                notice_datetime,
            </if>
            <if test="repeatCount != null">
                repeat_count,
            </if>
            <if test="sendType != null">
                send_type,
            </if>
            <if test="createdAt != null">
                created_at,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="orderId != null">
                #{orderId,jdbcType=CHAR},
            </if>
            <if test="appId != null">
                #{appId,jdbcType=VARCHAR},
            </if>
            <if test="appOrderNo != null">
                #{appOrderNo,jdbcType=VARCHAR},
            </if>
            <if test="method != null">
                #{method,jdbcType=TINYINT},
            </if>
            <if test="notifyUrl != null">
                #{notifyUrl,jdbcType=VARCHAR},
            </if>
            <if test="params != null">
                #{params,jdbcType=VARCHAR},
            </if>
            <if test="responseContent != null">
                #{responseContent,jdbcType=CHAR},
            </if>
            <if test="noticeDatetime != null">
                #{noticeDatetime,jdbcType=TIMESTAMP},
            </if>
            <if test="repeatCount != null">
                #{repeatCount,jdbcType=INTEGER},
            </if>
            <if test="sendType != null">
                #{sendType,jdbcType=TINYINT},
            </if>
            <if test="createdAt != null">
                #{createdAt,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="cn.gotoil.unipay.model.entity.NoticeLogExample"
            resultType="java.lang.Long">
        select count(*) from dp_notice_log
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update dp_notice_log
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.orderId != null">
                order_id = #{record.orderId,jdbcType=CHAR},
            </if>
            <if test="record.appId != null">
                app_id = #{record.appId,jdbcType=VARCHAR},
            </if>
            <if test="record.appOrderNo != null">
                app_order_no = #{record.appOrderNo,jdbcType=VARCHAR},
            </if>
            <if test="record.method != null">
                method = #{record.method,jdbcType=TINYINT},
            </if>
            <if test="record.notifyUrl != null">
                notify_url = #{record.notifyUrl,jdbcType=VARCHAR},
            </if>
            <if test="record.params != null">
                params = #{record.params,jdbcType=VARCHAR},
            </if>
            <if test="record.responseContent != null">
                response_content = #{record.responseContent,jdbcType=CHAR},
            </if>
            <if test="record.noticeDatetime != null">
                notice_datetime = #{record.noticeDatetime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.repeatCount != null">
                repeat_count = #{record.repeatCount,jdbcType=INTEGER},
            </if>
            <if test="record.sendType != null">
                send_type = #{record.sendType,jdbcType=TINYINT},
            </if>
            <if test="record.createdAt != null">
                created_at = #{record.createdAt,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update dp_notice_log
        set id = #{record.id,jdbcType=INTEGER},
        order_id = #{record.orderId,jdbcType=CHAR},
        app_id = #{record.appId,jdbcType=VARCHAR},
        app_order_no = #{record.appOrderNo,jdbcType=VARCHAR},
        method = #{record.method,jdbcType=TINYINT},
        notify_url = #{record.notifyUrl,jdbcType=VARCHAR},
        params = #{record.params,jdbcType=VARCHAR},
        response_content = #{record.responseContent,jdbcType=CHAR},
        notice_datetime = #{record.noticeDatetime,jdbcType=TIMESTAMP},
        repeat_count = #{record.repeatCount,jdbcType=INTEGER},
        send_type = #{record.sendType,jdbcType=TINYINT},
        created_at = #{record.createdAt,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="cn.gotoil.unipay.model.entity.NoticeLog">
        update dp_notice_log
        <set>
            <if test="orderId != null">
                order_id = #{orderId,jdbcType=CHAR},
            </if>
            <if test="appId != null">
                app_id = #{appId,jdbcType=VARCHAR},
            </if>
            <if test="appOrderNo != null">
                app_order_no = #{appOrderNo,jdbcType=VARCHAR},
            </if>
            <if test="method != null">
                method = #{method,jdbcType=TINYINT},
            </if>
            <if test="notifyUrl != null">
                notify_url = #{notifyUrl,jdbcType=VARCHAR},
            </if>
            <if test="params != null">
                params = #{params,jdbcType=VARCHAR},
            </if>
            <if test="responseContent != null">
                response_content = #{responseContent,jdbcType=CHAR},
            </if>
            <if test="noticeDatetime != null">
                notice_datetime = #{noticeDatetime,jdbcType=TIMESTAMP},
            </if>
            <if test="repeatCount != null">
                repeat_count = #{repeatCount,jdbcType=INTEGER},
            </if>
            <if test="sendType != null">
                send_type = #{sendType,jdbcType=TINYINT},
            </if>
            <if test="createdAt != null">
                created_at = #{createdAt,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="cn.gotoil.unipay.model.entity.NoticeLog">
    update dp_notice_log
    set order_id = #{orderId,jdbcType=CHAR},
      app_id = #{appId,jdbcType=VARCHAR},
      app_order_no = #{appOrderNo,jdbcType=VARCHAR},
      method = #{method,jdbcType=TINYINT},
      notify_url = #{notifyUrl,jdbcType=VARCHAR},
      params = #{params,jdbcType=VARCHAR},
      response_content = #{responseContent,jdbcType=CHAR},
      notice_datetime = #{noticeDatetime,jdbcType=TIMESTAMP},
      repeat_count = #{repeatCount,jdbcType=INTEGER},
      send_type = #{sendType,jdbcType=TINYINT},
      created_at = #{createdAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>