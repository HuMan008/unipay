<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.gotoil.unipay.model.mapper.AppMapper">
    <resultMap id="BaseResultMap" type="cn.gotoil.unipay.model.entity.App">
        <id column="app_key" jdbcType="CHAR" property="appKey"/>
        <result column="app_name" jdbcType="VARCHAR" property="appName"/>
        <result column="app_secret" jdbcType="VARCHAR" property="appSecret"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="remark" jdbcType="VARCHAR" property="remark"/>
        <result column="sync_url" jdbcType="VARCHAR" property="syncUrl"/>
        <result column="async_url" jdbcType="VARCHAR" property="asyncUrl"/>
        <result column="order_header" jdbcType="VARCHAR" property="orderHeader"/>
        <result column="order_descp" jdbcType="VARCHAR" property="orderDescp"/>
        <result column="default_order_expired_time" jdbcType="INTEGER" property="defaultOrderExpiredTime"/>
        <result column="created_at" jdbcType="TIMESTAMP" property="createdAt"/>
        <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    app_key, app_name, app_secret, status, remark, sync_url, async_url, order_header, 
    order_descp, default_order_expired_time, created_at, updated_at
  </sql>
    <select id="selectByExample" parameterType="cn.gotoil.unipay.model.entity.AppExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from dp_app
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="limit != null">
            <if test="offset != null">
                limit ${offset}, ${limit}
            </if>
            <if test="offset == null">
                limit ${limit}
            </if>
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from dp_app
        where app_key = #{appKey,jdbcType=CHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from dp_app
    where app_key = #{appKey,jdbcType=CHAR}
  </delete>
    <delete id="deleteByExample" parameterType="cn.gotoil.unipay.model.entity.AppExample">
        delete from dp_app
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="cn.gotoil.unipay.model.entity.App">
    insert into dp_app (app_key, app_name, app_secret, 
      status, remark, sync_url, 
      async_url, order_header, order_descp, 
      default_order_expired_time, created_at, updated_at
      )
    values (#{appKey,jdbcType=CHAR}, #{appName,jdbcType=VARCHAR}, #{appSecret,jdbcType=VARCHAR}, 
      #{status,jdbcType=TINYINT}, #{remark,jdbcType=VARCHAR}, #{syncUrl,jdbcType=VARCHAR}, 
      #{asyncUrl,jdbcType=VARCHAR}, #{orderHeader,jdbcType=VARCHAR}, #{orderDescp,jdbcType=VARCHAR}, 
      #{defaultOrderExpiredTime,jdbcType=INTEGER}, #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP}
      )
  </insert>
    <insert id="insertSelective" parameterType="cn.gotoil.unipay.model.entity.App">
        insert into dp_app
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="appKey != null">
                app_key,
            </if>
            <if test="appName != null">
                app_name,
            </if>
            <if test="appSecret != null">
                app_secret,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="remark != null">
                remark,
            </if>
            <if test="syncUrl != null">
                sync_url,
            </if>
            <if test="asyncUrl != null">
                async_url,
            </if>
            <if test="orderHeader != null">
                order_header,
            </if>
            <if test="orderDescp != null">
                order_descp,
            </if>
            <if test="defaultOrderExpiredTime != null">
                default_order_expired_time,
            </if>
            <if test="createdAt != null">
                created_at,
            </if>
            <if test="updatedAt != null">
                updated_at,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="appKey != null">
                #{appKey,jdbcType=CHAR},
            </if>
            <if test="appName != null">
                #{appName,jdbcType=VARCHAR},
            </if>
            <if test="appSecret != null">
                #{appSecret,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=TINYINT},
            </if>
            <if test="remark != null">
                #{remark,jdbcType=VARCHAR},
            </if>
            <if test="syncUrl != null">
                #{syncUrl,jdbcType=VARCHAR},
            </if>
            <if test="asyncUrl != null">
                #{asyncUrl,jdbcType=VARCHAR},
            </if>
            <if test="orderHeader != null">
                #{orderHeader,jdbcType=VARCHAR},
            </if>
            <if test="orderDescp != null">
                #{orderDescp,jdbcType=VARCHAR},
            </if>
            <if test="defaultOrderExpiredTime != null">
                #{defaultOrderExpiredTime,jdbcType=INTEGER},
            </if>
            <if test="createdAt != null">
                #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedAt != null">
                #{updatedAt,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="cn.gotoil.unipay.model.entity.AppExample" resultType="java.lang.Long">
        select count(*) from dp_app
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update dp_app
        <set>
            <if test="record.appKey != null">
                app_key = #{record.appKey,jdbcType=CHAR},
            </if>
            <if test="record.appName != null">
                app_name = #{record.appName,jdbcType=VARCHAR},
            </if>
            <if test="record.appSecret != null">
                app_secret = #{record.appSecret,jdbcType=VARCHAR},
            </if>
            <if test="record.status != null">
                status = #{record.status,jdbcType=TINYINT},
            </if>
            <if test="record.remark != null">
                remark = #{record.remark,jdbcType=VARCHAR},
            </if>
            <if test="record.syncUrl != null">
                sync_url = #{record.syncUrl,jdbcType=VARCHAR},
            </if>
            <if test="record.asyncUrl != null">
                async_url = #{record.asyncUrl,jdbcType=VARCHAR},
            </if>
            <if test="record.orderHeader != null">
                order_header = #{record.orderHeader,jdbcType=VARCHAR},
            </if>
            <if test="record.orderDescp != null">
                order_descp = #{record.orderDescp,jdbcType=VARCHAR},
            </if>
            <if test="record.defaultOrderExpiredTime != null">
                default_order_expired_time = #{record.defaultOrderExpiredTime,jdbcType=INTEGER},
            </if>
            <if test="record.createdAt != null">
                created_at = #{record.createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updatedAt != null">
                updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update dp_app
        set app_key = #{record.appKey,jdbcType=CHAR},
        app_name = #{record.appName,jdbcType=VARCHAR},
        app_secret = #{record.appSecret,jdbcType=VARCHAR},
        status = #{record.status,jdbcType=TINYINT},
        remark = #{record.remark,jdbcType=VARCHAR},
        sync_url = #{record.syncUrl,jdbcType=VARCHAR},
        async_url = #{record.asyncUrl,jdbcType=VARCHAR},
        order_header = #{record.orderHeader,jdbcType=VARCHAR},
        order_descp = #{record.orderDescp,jdbcType=VARCHAR},
        default_order_expired_time = #{record.defaultOrderExpiredTime,jdbcType=INTEGER},
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="cn.gotoil.unipay.model.entity.App">
        update dp_app
        <set>
            <if test="appName != null">
                app_name = #{appName,jdbcType=VARCHAR},
            </if>
            <if test="appSecret != null">
                app_secret = #{appSecret,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
            <if test="remark != null">
                remark = #{remark,jdbcType=VARCHAR},
            </if>
            <if test="syncUrl != null">
                sync_url = #{syncUrl,jdbcType=VARCHAR},
            </if>
            <if test="asyncUrl != null">
                async_url = #{asyncUrl,jdbcType=VARCHAR},
            </if>
            <if test="orderHeader != null">
                order_header = #{orderHeader,jdbcType=VARCHAR},
            </if>
            <if test="orderDescp != null">
                order_descp = #{orderDescp,jdbcType=VARCHAR},
            </if>
            <if test="defaultOrderExpiredTime != null">
                default_order_expired_time = #{defaultOrderExpiredTime,jdbcType=INTEGER},
            </if>
            <if test="createdAt != null">
                created_at = #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedAt != null">
                updated_at = #{updatedAt,jdbcType=TIMESTAMP},
            </if>
        </set>
        where app_key = #{appKey,jdbcType=CHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="cn.gotoil.unipay.model.entity.App">
    update dp_app
    set app_name = #{appName,jdbcType=VARCHAR},
      app_secret = #{appSecret,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT},
      remark = #{remark,jdbcType=VARCHAR},
      sync_url = #{syncUrl,jdbcType=VARCHAR},
      async_url = #{asyncUrl,jdbcType=VARCHAR},
      order_header = #{orderHeader,jdbcType=VARCHAR},
      order_descp = #{orderDescp,jdbcType=VARCHAR},
      default_order_expired_time = #{defaultOrderExpiredTime,jdbcType=INTEGER},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP}
    where app_key = #{appKey,jdbcType=CHAR}
  </update>
</mapper>